[
["dataviz.html", "Chapter 4 Data Visualization: ggplot2 4.1 Install and call ggplot2 4.2 Shapes and colors 4.3 Scales: useful plot edits 4.4 Example plot 4.5 Store and save ggplot2 objects 4.6 Getting help with ggplot2", " Chapter 4 Data Visualization: ggplot2 4.1 Install and call ggplot2 The best design gets out of the way between the viewer’s brain and the content. - Edward Tufte In this chapter, you will learn how to make basic plots using the ggplot2 package in R (also part of the Tidyverse). This section will focus on making useful, rather than attractive graphs, since at this stage we are focusing on exploring data for yourself rather than presenting results to others. Later on, I will explain more about how you can customize ggplot objects, to help you make plots that “get out the way” between the content you wish to present and the viewer’s brain, where you hope understanding takes root. If you don’t already have ggplot2 installed, you’ll need to install it. You then need to load the package in your current session of R: install.packages(&quot;ggplot2&quot;) library(ggplot2) The process of creating a plot using ggplot2 follows conventions that are a bit different than most of the code you’ve seen so far in R (although it is somewhat similar to the idea of piping I introduced in the last chapter). The basic steps behind creating a plot with ggplot2 are: Create an object of the ggplot class, typically specifying the data and some or all of the aesthetics; Add a layer or geom to the plot, along with other specific elements, using +. Aesthetics or aes in R represent the things that we are plotting; the x and y data. Geoms like geom_point represent the way in which we layer the aesthetics onto the plot. The geom is the type of plot that we are calling. You can layer on one or many geoms and other elements to create plots that range from very simple to very customized. We will start by focusing on simple geoms and added elements; later on, we will explore more detailed customization. A common error when writing ggplot2 code is to put the + to add a geom or element at the beginning of a line rather than the end of a previous line– in this case, R will try to execute the call too soon. If R gets to the end of a line and there is no indication to continue the call (e.g., %&gt;% for piping or + for ggplot2 plots), R interprets that as a message to run the call without reading in further code. Thus, to avoid errors, be sure to end each line in ggplot calls with + (except for the final line when the call is actually over); don’t start lines with +. 4.1.1 Initializing a ggplot object The first step in creating a plot using ggplot2 is to create a ggplot object. This object will not, by itself, create a plot with anything in it. Instead, this first step typically specifies the data frame you want to use and which aesthetics will be mapped to certain columns of that data frame (aesthetics are explained more in the next subsection). Use the following conventions to initialize a ggplot object: ## Generic code object &lt;- ggplot(my_dataframe, aes(x = data_column_1, y = data_column_2)) The data frame is the first parameter in a ggplot call and, if you like, you can use the parameter definition with that call (e.g., data = dataframe). Aesthetics are defined within an aes function call that typically is used within the ggplot call. While the ggplot call is the place where you will most often see an aes call, you can also make calls to aes within the calls to specific geoms. This can be particularly useful if you want to map aesthetics differently for different geoms in your plot. We’ll see some examples of this use of aes more in later sections, when we talk about customizing plots. The data parameter can also be used in geom calls, to use a different data frame from the one defined when creating the original ggplot object, although this tends to be less common. 4.1.2 Plot aesthetics Aesthetics are properties of the plot that can show certain elements of the data. For example, in Figure 4.1, we call an x-axis aesthetic (x = class) from the mpg dataset. We then plot counts of cars within different vehicle classes using geom_bar. The mpg dataframe is included with the ggplot2 package; you can learn more about it by typing ?mpg into the console after loading ggplot2 (library(ggplot2)). You can also learn more by typing str(mpg) and head(mpg) - always a good practice when looking at a new dataframe! According to ?mpg: &gt; “This dataset contains a subset of the fuel economy data that the EPA makes available on http://fueleconomy.gov. It contains only models which had a new release every year between 1999 and 2008 - this was used as a proxy for the popularity of the car.” # call to ggplot to map the data and a single aesthetic ggplot(data = mpg, aes(x = class)) + # call to a specific geom to plot the mapped data geom_bar() Figure 4.1: Example of a simple call to ggplot showing counts of vehicle classes from the mpg dataframe. Let’s call this plot again with a second aesthetic, the fill color, which will be mapped to vehicle drive type (4-wheel, font-wheel, rear-wheel). The x-position will continue to show vehicle class, and the y-position will show the counts of vehicles, now colored by the drive types. # call to ggplot to map the data and a single aesthetic ggplot(data = mpg, aes(x = class, fill = drv)) + # call to a specific geom to plot the mapped data geom_bar() Figure 4.2: Example of a call to ggplot showing counts of vehicle classes from the mpg dataframe and colored by the fill aesthetic mapped to drive type (drv). ggplot will naturally choose colors and add legends to plots when an aesthetic mapping creates such opportunities. You will learn ways to customize colors, legends, and other plot elements later on. Which aesthetics are required for a plot depend on which geoms (more on those in a second) you’re adding to the plot. You can find out the aesthetics you can use for a geom in the “Aesthetics” section of the geom’s help file (e.g., ?geom_bar). Required aesthetics are in bold in this section of the help file and optional ones are not. Common plot aesthetics you might want to specify include: Table 4.1: Common Plot Aesthetics Code Description x Position on x-axis y Position on y-axis shape Shape color Color of border of elements fill Color of inside of elements size Size alpha Transparency (1: opaque; 0: transparent) linetype Type of line (e.g., solid, dashed) 4.1.3 Adding geoms When creating plots, you’ll often want to add more than one geom to the plot. You can add these with + after the ggplot statement to initialize the ggplot object. Some of the most common geoms are: Table 4.2: Common Plot Aesthetics Plot type ggplot2 function Histogram (1 numeric variable) geom_histogram Scatterplot (2 numeric variables) geom_point Boxplot (1 numeric variable, possibly 1 factor variable) geom_boxplot Line graph (2 numeric variables) geom_line 4.1.4 Aesthetic override: a warning The ggplot2 package, like many Tidyverse packages, is both flexible and forgiving - designed to accomodate the user by “filling in the blanks” when no information is provided. For example, in the ggplot call that created Figure 4.2, we didn’t specify the colors to be used or the contents of the legend - instead ggplot figured those out for us. The ggplot2 package is also somewhat flexibile in how calls and aesthetic mappings can be structured; for example, the following four calls all produce the same (identical) plot as shown in Figure 4.2. Try it for yourself. # call to ggplot with aes() specified in main call ggplot(data = mpg, aes(x = class, fill = drv)) + geom_bar() # call to ggplot with aes() specified in geom ggplot(data = mpg) + geom_bar(aes(x = class, fill = drv)) # call to ggplot with a mix of aes() mappings ggplot(data = mpg, aes(x = class)) + geom_bar(aes(fill = drv)) # call to ggplot with all mappings in the geom ggplot() + geom_bar(data = mpg, aes(x = class, fill = drv)) However, this flexibility also comes with occasional confusion, as you can often override one mapping with another one later on in the same call. For example, see what happends when two different fill mappings are specified at different points in the call: # call to ggplot where one `fill` overrides another ggplot(data = mpg, aes(x = class, fill = drv)) + geom_bar(fill = &quot;darkgreen&quot;) Figure 4.3: Example of a call to ggplot showing counts of vehicle classes from the mpg dataframe and colored by the fill aesthetic mapped to drive type (drv). In this case, the aesthetic mapping of aes(fill = drv) was overridden by the specification in geom_bar(), where we wrote fill = &quot;darkgreen&quot;. This second specification essentially wiped away the stacked bar colors and the legend (as shown in Figure 4.2). As your ggplot2 objects become more customized this sort of issue can arise; it comes with the territory of having flexible code. 4.2 Shapes and colors In R, you can specify the shape of points with a number. Figure 4.4 shows the shapes that correspond to the numbers 1 to 25 in the shape aesthetic. This figure also provides an example of the difference between color (black for all these example points) and fill (red for these examples). You can see that some point shapes include a fill (21 for example), while some are either empty (1) or solid (19). Figure 4.4: Examples of the shapes corresponding to different numeric choices for the shape aesthetic. For all examples, color is set to black and fill to red. If you want to set color to be a constant value, you can do that in R using character strings for different colors. Figure 4.5 gives an example of some of the different blues available in R. To find links to listings of different R colors, google “R colors” and search by “Images”. Figure 4.5: Example of available shades of blue in R. 4.3 Scales: useful plot edits The ‘ggplot2’ package uses scales to as a way to make all sorts of tweaks and changes to how the plot is presented. According to the ggplot2 reference: “Scales control the details of how data values are translated to visual properties. Override the default scales to tweak details like the axis labels or legend keys, or to use a completely different translation from data to aesthetic.” There are many scale elements that you can add onto a ggplot object using +. A few that are used very frequently are: Table 4.3: Common Scale Elements Element Description ggtitle Plot title xlab, ylab x- and y-axis labels xlim, ylim Limits of x- and y-axis scale_x_log10 Log scale x axis 4.4 Example plot For the example plots, we will continue to use the mpg dataset from the ggplot package. We will use functions from dplyr and ggplot2, so those need to be loaded: library(dplyr) library(ggplot2) 4.5 Store and save ggplot2 objects 4.6 Getting help with ggplot2 The ggplot2 package has become so popular that most of my “how do I do this?” questions have already been asked, answered, and archived on sites like stackoverflow. Another great source is the ggplot2 reference section on the Tidyverse site. This page contains a nice, concise summary of how to call and customize plot objects. I reccommend starting there because (1) it is created and maintained by the ggplot2 developers (and, thus, is authoritative) and (2) the reference page contains all the function calls in an organized list, for which you can conduct a ‘control/command F’ search. "]
]
