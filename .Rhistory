"2020aaa12aaa12",
"20,12,12",
"2020x12-12",
"2020   ....    12        ......     12",
"'20.December-12")
ymd(messy_dates)
lubridate_parsers <- tibble(functions = c("`ymd()`",
"`mdy()`",
"`dmy()`"),
formats = c("year-month-day",
"month-day-year",
"day-month-year")
)
knitr::kable(lubridate_parsers, col.names = c("Parsing Function", "Format to Convert")) %>%
kable_styling(full_width = F,  bootstrap_options = "basic")
lubridate_parsers2 <- tibble(functions = c("`ymd_h()`",
"`mdy_hm()`",
"`dmy_hms()`"),
formats = c("year-month-day_hours",
"year-month-day_hours-minutes",
"year-month-day_hours-minutes-seconds")
)
knitr::kable(lubridate_parsers2, col.names = c("Parsing Function", "Format to Convert")) %>%
kable_styling(full_width = F,  bootstrap_options = "basic")
library(package = "lubridate")
class(x = daily_show$date) # Check the class of the 'date' column before mutating it
daily_show <- mutate(.data = daily_show,
date = mdy(date))
head(x = daily_show, n = 3)
class(x = daily_show$date) # Check the class of the 'date' column after mutating it
daily_show <- read_csv(file = "data/daily_show_guests.csv",
skip = 4) %>%
rename(job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List) %>%
select(-YEAR) %>%
mutate(date = mdy(date)) %>%
filter(category == "Science")
head(x = daily_show, n = 2)
mutate(.data = daily_show,
show_day = wday(x = date, label = TRUE)) %>%
select(date, show_day, guest_name) %>%
slice(1:5)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
library(tidyverse)
library(knitr)
library(bookdown)
library(scales)
library(kableExtra)
corr_plots1 <- tibble(x = runif(100, 0, 100),
y1 = x,
y2 = map_dbl(x, ~ (.x*(rnorm(1, mean = 1,  sd = 0.03)) + rnorm(1, mean = 0, sd = 2))),
y3 = map_dbl(x, ~ (.x*(rnorm(1, mean = 0.6,  sd = 0.2)) + rnorm(1, mean = 15, sd = 15))),
y4 = runif(100, 0, 100)
) %>%
pivot_longer(y1:y4, names_to = "type") %>%
mutate(types = as.factor(type))
levels(corr_plots1$types) <- c("Perfect Correlation", "Strong Correlation", "Moderate Correlation", "No Correlation")
p1 <- ggplot(data = corr_plots1,
aes(x = x, y = value)) +
geom_point(aes(color = types)) +
facet_wrap(facets = vars(types),
ncol = 2) +
theme_bw() +
coord_fixed(ratio=1.0) +
labs(x = "Independent Variable",
y = "Dependent Variable") +
theme(legend.position = "none")
ggsave("./images/correlation_example_1.png", dpi = 150)
knitr::include_graphics("./images/correlation_example_1.png")
corr_plots2 <- tibble(x = runif(100, 0, 100),
y1 = map_dbl(x, ~ (.x*(rnorm(1, mean = .8,  sd = 0.15)) + rnorm(1, mean = 10, sd = 10))),
y2 = map_dbl(x, ~ -(.x*(rnorm(1, mean = 0.6,  sd = 0.06)) - rnorm(1, mean = 70, sd = 5))),
y3 = map_dbl(x, ~ (.x*(rnorm(1, mean = 1,  sd = 0.02))^2 + rnorm(1, mean = 0, sd = 2))),
y4 = map_dbl(x, ~ (100*exp(-.x/20)*(rnorm(1, mean = 1,  sd = 0.03)) + rnorm(1, mean = 4, sd = 2)))
) %>%
pivot_longer(y1:y4, names_to = "type") %>%
mutate(types = as.factor(type))
levels(corr_plots2$types) <- c("Positive Correlation",
"Negative Correlation",
"Linear Correlation",
"Non-Linear Correlation")
p2 <- ggplot(data = corr_plots2,
aes(x = x, y = value)) +
geom_point(aes(color = types)) +
facet_wrap(facets = vars(types)) +
theme_bw() +
coord_fixed(ratio=1) +
theme(legend.position = "none") +
labs(x = "Independent Variable",
y = "Dependent Variable")
ggsave("./images/correlation_example_2.png", dpi = 150)
knitr::include_graphics("./images/correlation_example_2.png")
ggplot(data = (mpg),
aes(x = cyl, y = hwy)) +
geom_jitter(aes(x = cyl, y = hwy),
shape = 1,
color = "blue",
width = 0.1,
height = 0.05,
size = 2) +
geom_smooth(method='lm',
se = FALSE,
size = 0.5,
color = "blue") +
xlab("# of Cylinders") +
ylab("Highway Fuel Economy (mi/gal)") +
theme_classic()
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
library(tidyverse)
library(knitr)
library(bookdown)
library(scales)
library(tinytex)
library(tidyverse)
library(gridExtra)
knitr::include_graphics(path = "./images/centering_anno.png", dpi = 150)
knitr::include_graphics("./images/reduce_skew_anno.png", dpi = 150)
knitr::include_graphics("./images/unstratified.png")
knitr::include_graphics("./images/stratified.png")
asthma.data <- tibble(
asthma.rate = c(8, 6, 12, 18, 9, 8, 15, 14, 14, 10, 16, 9, 12, 15, 9),
black.carbon = c(3.2, 2.5, 4.6, 6.1, 3.3, 3.1, 6.1, 5.3, 4.5, 3.3, 6.4, 3.7, 5.1, 6.8, 12)
)
ggplot(data = asthma.data) +
geom_boxplot(aes(x = 1, y = asthma.rate)) +
geom_boxplot(aes(x = 2, y = black.carbon)) +
theme_classic()
ggplot(data = asthma.data) +
geom_point(aes(x = black.carbon,
y = asthma.rate)) +
theme_classic()
model <-lm(asthma.rate ~ black.carbon, data = asthma.data)
summary(model)
library(tidyverse)
library(package = "readr")
# The following two calls do the same thing
ebola <- readr::read_delim(file = "data/country_timeseries.csv", delim = ",")
ebola <- readr::read_csv(file = "data/country_timeseries.csv")
read_funcs <- data.frame(file_type = c("Excel",
"SAS",
"SPSS",
"Stata"),
func = c("`read_excel()`",
"`read_sas()`",
"`read_spss()`",
"`read_stata()`"),
pkg = c("`readxl`",
"`haven`",
"`haven`"))
knitr::kable(read_funcs, col.names = c("File type", "Function", "Package"))
knitr::include_graphics("figures/FileDirectoryStructure.png")
getwd()
dirpath_shortcuts <- data.frame(abbr = c("`~`", "`.`", "`..`", "`../..`"),
meaning = c("Home directory",
"Current working directory",
"One directory up from current working directory",
"Two directories up from current working directory"))
knitr::kable(dirpath_shortcuts, col.names = c("Shorthand", "Meaning"))
paste("Sunday", "Monday", "Tuesday")
length(x = c("Sunday", "Monday", "Tuesday"))
length(x = paste("Sunday", "Monday", "Tuesday"))
paste("Sunday", "Monday", "Tuesday", sep = "")
paste0("Sunday", "Monday", "Tuesday")
url <- paste0("https://raw.githubusercontent.com/cmrivers/",
"ebola/master/country_timeseries.csv")
ebola <- readr::read_csv(file = url)
slice(.data = (dplyr::select(.data = ebola, 1:3)), 1:3)
library(package = "tibble")
dc_func <- tibble(task = c("Renaming columns",
"Filtering to certain rows",
"Selecting certain columns",
"Adding or changing columns"),
func = c("`rename()`",
"`filter()`",
"`select()`",
"`mutate()`"))
knitr::kable(dc_func, col.names = c("Task", "`dplyr` function"))
library("dplyr")
daily_show <- readr::read_csv(file = "data/daily_show_guests.csv", skip = 4)
head(x = daily_show)
colnames(x = daily_show)
daily_show <- dplyr::rename(.data = daily_show,
year = YEAR,
job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List)
head(x = daily_show, 3)
dplyr::select(.data = daily_show, job, date, category, guest_name)
daily_show <- dplyr::select(.data = daily_show, -year)
head(x = daily_show, n = 3)
head(x = unique(x = daily_show$job), n = 10)
library(package = "stringr")
mutate(.data = daily_show,
job = str_to_lower(string = job))
dplyr_vs_base <- data.frame(dplyr = c("`rename()`",
"`select()`",
"`filter()`",
"`mutate()`"),
base = c("Reassign `colnames`",
"Square bracket indexing",
"`subset()`",
"Use `$` to change or create columns"))
knitr::kable(dplyr_vs_base, col.names = c("`dplyr`",
"Base R equivalent"))
scientists <- filter(.data = daily_show,
category == "Science")
head(x = scientists)
daily_show <- readr::read_csv(file = "data/daily_show_guests.csv",
skip = 4) %>%
dplyr::rename(job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List) %>%
dplyr::select(-YEAR) %>%
dplyr::mutate(job = str_to_lower(job)) %>%
dplyr::filter(category == "Science")
# Load the `readr` package
library(package = "readr")
# Use `read_tsv` to read this file.
ld_genetics <- read_tsv(file = "data/ld_genetics.txt")
summary(object = ld_genetics)
ca_measles <- read_tsv(file = "data/measles_data/02-09-2015.txt",
col_names = c("city", "count"))
head(x = ca_measles)
# You'll need the `readxl` package to read in the Excel file. Load that.
library(package = "readxl")
# Use the `read_excel` function to read in the file.
icd10 <- read_excel(path = "data/icd-10.xls")
head(x = icd10)
# You'll need the `haven` function to read in the SAS file. Load that.
library(package = "haven")
# Use the `read_sas` function to read in this file.
icu <- read_sas(data_file = "data/icu.sas7bdat")
library(package = "dplyr")
slice(.data = select(.data = icu, 1:5), 1:5)
# Load the dplyr package
library(package = "dplyr")
## Create a subset with just the Liberia columns and Date
ebola_liberia <- select(.data = ebola,
Date, Cases_Liberia, Deaths_Liberia)
head(x = ebola_liberia)
## How many colums and rows does the whole dataset have (could also use `dim`)?
ncol(x = ebola_liberia)
nrow(x = ebola_liberia)
## Rename the columns
ebola_liberia <- rename(.data = ebola_liberia,
date = Date,
cases = Cases_Liberia,
deaths = Deaths_Liberia)
head(ebola_liberia)
## Add a `ratio` column
ebola_liberia <- mutate(.data = ebola_liberia,
ratio = deaths / cases)
head(x = ebola_liberia)
## Filter out the rows that are missing death counts for Liberia
ebola_liberia <- filter(.data = ebola_liberia,
!is.na(deaths))
head(x = ebola_liberia)
nrow(x = ebola_liberia)
## Create an object with just the top five observations in terms of death counts
first_five <- arrange(.data = ebola_liberia,
desc(deaths)) # First, rearrange the rows by deaths
first_five <- slice(.data = first_five,
1:5) # Limit the dataframe to the first five rows
first_five # Two days tied for the highest deaths counts (Jan. 2 and 3, 2015).
ebola_liberia <- read_csv(file = "data/country_timeseries.csv") %>%
select(Date, Cases_Liberia, Deaths_Liberia) %>%
rename(date = Date,
cases = Cases_Liberia,
deaths = Deaths_Liberia) %>%
mutate(ratio = deaths / cases) %>%
filter(!is.na(x = cases))
head(x = ebola_liberia)
knitr::include_graphics("./images/YAML_1_anno.png")
library(tidyverse)
library(package = "readr")
# The following two calls do the same thing
ebola <- readr::read_delim(file = "data/country_timeseries.csv", delim = ",")
ebola <- readr::read_csv(file = "data/country_timeseries.csv")
read_funcs <- data.frame(file_type = c("Excel",
"SAS",
"SPSS",
"Stata"),
func = c("`read_excel()`",
"`read_sas()`",
"`read_spss()`",
"`read_stata()`"),
pkg = c("`readxl`",
"`haven`",
"`haven`"))
knitr::kable(read_funcs, col.names = c("File type", "Function", "Package"))
knitr::include_graphics("figures/FileDirectoryStructure.png")
getwd()
dirpath_shortcuts <- data.frame(abbr = c("`~`", "`.`", "`..`", "`../..`"),
meaning = c("Home directory",
"Current working directory",
"One directory up from current working directory",
"Two directories up from current working directory"))
knitr::kable(dirpath_shortcuts, col.names = c("Shorthand", "Meaning"))
paste("Sunday", "Monday", "Tuesday")
length(x = c("Sunday", "Monday", "Tuesday"))
length(x = paste("Sunday", "Monday", "Tuesday"))
paste("Sunday", "Monday", "Tuesday", sep = "")
paste0("Sunday", "Monday", "Tuesday")
url <- paste0("https://raw.githubusercontent.com/cmrivers/",
"ebola/master/country_timeseries.csv")
ebola <- readr::read_csv(file = url)
slice(.data = (dplyr::select(.data = ebola, 1:3)), 1:3)
library(package = "tibble")
dc_func <- tibble(task = c("Renaming columns",
"Filtering to certain rows",
"Selecting certain columns",
"Adding or changing columns"),
func = c("`rename()`",
"`filter()`",
"`select()`",
"`mutate()`"))
knitr::kable(dc_func, col.names = c("Task", "`dplyr` function"))
library("dplyr")
daily_show <- readr::read_csv(file = "data/daily_show_guests.csv", skip = 4)
head(x = daily_show)
colnames(x = daily_show)
daily_show <- dplyr::rename(.data = daily_show,
year = YEAR,
job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List)
head(x = daily_show, 3)
dplyr::select(.data = daily_show, job, date, category, guest_name)
daily_show <- dplyr::select(.data = daily_show, -year)
head(x = daily_show, n = 3)
head(x = unique(x = daily_show$job), n = 10)
library(package = "stringr")
mutate(.data = daily_show,
job = str_to_lower(string = job))
dplyr_vs_base <- data.frame(dplyr = c("`rename()`",
"`select()`",
"`filter()`",
"`mutate()`"),
base = c("Reassign `colnames`",
"Square bracket indexing",
"`subset()`",
"Use `$` to change or create columns"))
knitr::kable(dplyr_vs_base, col.names = c("`dplyr`",
"Base R equivalent"))
scientists <- filter(.data = daily_show,
category == "Science")
head(x = scientists)
daily_show <- readr::read_csv(file = "data/daily_show_guests.csv",
skip = 4) %>%
dplyr::rename(job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List) %>%
dplyr::select(-YEAR) %>%
dplyr::mutate(job = str_to_lower(job)) %>%
dplyr::filter(category == "Science")
knitr::include_graphics("./images/YAML_1_anno.png")
formats <- tibble(
formats = c("*italics*", )
)
library(tidyverse)
library(package = "readr")
# The following two calls do the same thing
ebola <- readr::read_delim(file = "data/country_timeseries.csv", delim = ",")
ebola <- readr::read_csv(file = "data/country_timeseries.csv")
read_funcs <- data.frame(file_type = c("Excel",
"SAS",
"SPSS",
"Stata"),
func = c("`read_excel()`",
"`read_sas()`",
"`read_spss()`",
"`read_stata()`"),
pkg = c("`readxl`",
"`haven`",
"`haven`"))
knitr::kable(read_funcs, col.names = c("File type", "Function", "Package"))
knitr::include_graphics("figures/FileDirectoryStructure.png")
getwd()
dirpath_shortcuts <- data.frame(abbr = c("`~`", "`.`", "`..`", "`../..`"),
meaning = c("Home directory",
"Current working directory",
"One directory up from current working directory",
"Two directories up from current working directory"))
knitr::kable(dirpath_shortcuts, col.names = c("Shorthand", "Meaning"))
paste("Sunday", "Monday", "Tuesday")
length(x = c("Sunday", "Monday", "Tuesday"))
length(x = paste("Sunday", "Monday", "Tuesday"))
paste("Sunday", "Monday", "Tuesday", sep = "")
paste0("Sunday", "Monday", "Tuesday")
url <- paste0("https://raw.githubusercontent.com/cmrivers/",
"ebola/master/country_timeseries.csv")
ebola <- readr::read_csv(file = url)
slice(.data = (dplyr::select(.data = ebola, 1:3)), 1:3)
library(package = "tibble")
dc_func <- tibble(task = c("Renaming columns",
"Filtering to certain rows",
"Selecting certain columns",
"Adding or changing columns"),
func = c("`rename()`",
"`filter()`",
"`select()`",
"`mutate()`"))
knitr::kable(dc_func, col.names = c("Task", "`dplyr` function"))
library("dplyr")
daily_show <- readr::read_csv(file = "data/daily_show_guests.csv", skip = 4)
head(x = daily_show)
colnames(x = daily_show)
daily_show <- dplyr::rename(.data = daily_show,
year = YEAR,
job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List)
head(x = daily_show, 3)
dplyr::select(.data = daily_show, job, date, category, guest_name)
daily_show <- dplyr::select(.data = daily_show, -year)
head(x = daily_show, n = 3)
head(x = unique(x = daily_show$job), n = 10)
library(package = "stringr")
mutate(.data = daily_show,
job = str_to_lower(string = job))
dplyr_vs_base <- data.frame(dplyr = c("`rename()`",
"`select()`",
"`filter()`",
"`mutate()`"),
base = c("Reassign `colnames`",
"Square bracket indexing",
"`subset()`",
"Use `$` to change or create columns"))
knitr::kable(dplyr_vs_base, col.names = c("`dplyr`",
"Base R equivalent"))
scientists <- filter(.data = daily_show,
category == "Science")
head(x = scientists)
daily_show <- readr::read_csv(file = "data/daily_show_guests.csv",
skip = 4) %>%
dplyr::rename(job = GoogleKnowlege_Occupation,
date = Show,
category = Group,
guest_name = Raw_Guest_List) %>%
dplyr::select(-YEAR) %>%
dplyr::mutate(job = str_to_lower(job)) %>%
dplyr::filter(category == "Science")
knitr::include_graphics("./images/YAML_1_anno.png")
# Load the `readr` package
library(package = "readr")
# Use `read_tsv` to read this file.
ld_genetics <- read_tsv(file = "data/ld_genetics.txt")
summary(object = ld_genetics)
ca_measles <- read_tsv(file = "data/measles_data/02-09-2015.txt",
col_names = c("city", "count"))
head(x = ca_measles)
# You'll need the `readxl` package to read in the Excel file. Load that.
library(package = "readxl")
# Use the `read_excel` function to read in the file.
icd10 <- read_excel(path = "data/icd-10.xls")
head(x = icd10)
# You'll need the `haven` function to read in the SAS file. Load that.
library(package = "haven")
# Use the `read_sas` function to read in this file.
icu <- read_sas(data_file = "data/icu.sas7bdat")
library(package = "dplyr")
slice(.data = select(.data = icu, 1:5), 1:5)
# Load the dplyr package
library(package = "dplyr")
## Create a subset with just the Liberia columns and Date
ebola_liberia <- select(.data = ebola,
Date, Cases_Liberia, Deaths_Liberia)
head(x = ebola_liberia)
## How many colums and rows does the whole dataset have (could also use `dim`)?
ncol(x = ebola_liberia)
nrow(x = ebola_liberia)
## Rename the columns
ebola_liberia <- rename(.data = ebola_liberia,
date = Date,
cases = Cases_Liberia,
deaths = Deaths_Liberia)
head(ebola_liberia)
## Add a `ratio` column
ebola_liberia <- mutate(.data = ebola_liberia,
ratio = deaths / cases)
head(x = ebola_liberia)
## Filter out the rows that are missing death counts for Liberia
ebola_liberia <- filter(.data = ebola_liberia,
!is.na(deaths))
head(x = ebola_liberia)
nrow(x = ebola_liberia)
## Create an object with just the top five observations in terms of death counts
first_five <- arrange(.data = ebola_liberia,
desc(deaths)) # First, rearrange the rows by deaths
first_five <- slice(.data = first_five,
1:5) # Limit the dataframe to the first five rows
first_five # Two days tied for the highest deaths counts (Jan. 2 and 3, 2015).
ebola_liberia <- read_csv(file = "data/country_timeseries.csv") %>%
select(Date, Cases_Liberia, Deaths_Liberia) %>%
rename(date = Date,
cases = Cases_Liberia,
deaths = Deaths_Liberia) %>%
mutate(ratio = deaths / cases) %>%
filter(!is.na(x = cases))
head(x = ebola_liberia)
knitr::include_graphics("./images/YAML_2_anno.png")
knitr::include_graphics("./images/markdown_anno.png")
knitr::include_graphics("./images/markdown_render.png")
knitr::include_graphics("./images/markdown_anno.png")
knitr::include_graphics("./images/markdown_render.png")
