matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c"),
example_code = c("\"\\\\\\\\d\"", "\"[abc]\"", "\"[a-z]\"", "\"[^abc]\"")
)
knitr::kable(table_regex, align = "c", col.names = c("Regex syntax","String Match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d", "[abc]", "[a-z]", "[^abc]"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c"),
example_code = c("\"\\\\\\\\d\"", "\"[abc]\"", "\"[a-z]\"", "\"[^abc]\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d", "[abc]", "[a-z]", "[^abc]"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c"),
example_code = c("\"\\\\\\\\d\"", "\"[abc]\"", "\"[a-z]\"", "\"[^abc]\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
library(knitr)
library(bookdown)
knitr::include_graphics("figures/program_types2.jpg")
knitr::include_graphics("figures/OpenSourceOverview.png")
knitr::include_graphics("figures/r_console.jpg")
print(x = "Hello, world!")
knitr::include_graphics("figures/function_call.jpg")
print(x = "Hello, world!")
print(x = "Hi, Fort Collins!")
getRversion()
print(x = "Hello world", quote = TRUE)
print(x = "Hello world", quote = FALSE)
print(x = "Hello, world!", quote = TRUE)
print(x = "Hello, world!")
knitr::include_graphics("figures/helpfile_arguments.jpg")
2 + 3
"Hello, world!"
message <- "Hello, world!"
print(x = message)
message
ls()
knitr::include_graphics("figures/environment_pane.jpg")
message <- paste("Hello", "world")
print(x = message)
a <- 1:10
b <- LETTERS [1:3]
a
b
a <- b
a
print(x = paste("Hello", "world"))
knitr::include_graphics("figures/composing_function_calls.jpg")
knitr::include_graphics("figures/ExampleOfRScript.jpg")
"Print this" # But not this, it's a comment.
knitr::include_graphics("figures/TrainBasic.JPG")
knitr::include_graphics("figures/TrainComplex.JPG")
knitr::include_graphics("figures/CRAN_package_10000.png")
knitr::include_graphics("figures/telephone_keypad.png")
library(package = "phonenumber")
knitr::include_graphics("figures/install_vs_library.jpg")
fedex_number <- "GoFedEx"
letterToNumber(value = fedex_number)
citation(package = "phonenumber")
knitr::include_graphics("figures/example_vector.jpg")
knitr::include_graphics("figures/vector_class_examples.jpg")
c("Harry", "Ron", "Hermione")
main_characters <- c("Harry", "Ron", "Hermione")
print(x = main_characters)
knitr::include_graphics("figures/vector_class_examples.jpg")
n_kids <- c(1, 7, 1)
mixed_classes <- c(1, 3, "five")
mixed_classes
class(x = mixed_classes)
length(x = mixed_classes)
main_characters[2] # Get the second value
main_characters[c(1, 3)] # Get first and third values
1:10
main_characters[1:2] # Get the first two values
knitr::include_graphics("figures/example_dataframe.jpg")
library(package = "tibble")
hp_data <- tibble(first_name = c("Harry", "Ron", "Hermione"),
last_name = c("Potter", "Weasley", "Granger"),
n_kids = c(1, 7, 1),
survived = c(TRUE, TRUE, TRUE))
hp_data
knitr::include_graphics("figures/example_dataframe_labeled.jpg")
library(package = "tibble")
hp_data <- tibble(first_name = c("Harry", "Ron", "Hermione"),
last_name = c("Potter", "Weasley", "Granger"),
n_kids = c(1, 7, 1),
survived = c(TRUE, TRUE, TRUE))
hp_data
hp_data <- tibble(first_name = main_characters,
last_name = c("Potter", "Weasley", "Granger"),
n_kids = n_kids,
survived = c(TRUE, TRUE, TRUE))
hp_data
library(package = "readr")
daily_show <- read_csv(file = "data/daily_show_guests.csv",
skip = 4)
dim(x = daily_show)
nrow(x = daily_show)
ncol(x = daily_show)
str(object = daily_show)
summary(object = daily_show)
library(package = "dplyr")
slice(.data = hp_data, c(1:2))
select(.data = hp_data, c(1, 4))
select(.data = slice(.data = hp_data, c(1:2)), c(1, 4))
hp_data[1:2, 2] # First two rows, second column
hp_data[3, ] # Last row, all columns
str_detect(names_respond, "Josh") %>%
sum()
str_detect(names_respond, "Josh") %>%
sum(.x)
str_detect(names_respond, "Josh") %>%
sum(.)
str_detect(names_respond, "Josh") %>%
sum()/count()
str_detect(names_respond, "Josh") %>%
sum()/count(names_respond)
str_detect(names_respond, "Josh") %>%
sum()/n(names_respond)
str_detect(names_respond, "Josh") %>%
sum()/length(names_respond)
str_detect(names_respond, "Josh") %>%
sum()
str_extract(names_respond, "li")
str_match(names_respond, "Jo")
str_match(names_respond, "o")
table_regex <- tibble(
regex = c("\\\\d", "[abc]", "[a-z]", "[^abc]", "(abc)"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur togehter"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")"
)
knitr::kable(table_regex,
table_regex <- tibble(
regex = c("\\\\d", "[abc]", "[a-z]", "[^abc]", "(abc)"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur togehter"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d", "[abc]", "[a-z]", "[^abc]", "(abc)"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")")
)
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"occurs at the start of a string"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\^a\"")
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"occurs at the start of a string"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\\^a\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a",
"$a"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"occurs at the start of a string",
"occurs at the end of a string"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\\^a\"",
"\"\\$a\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a",
"$a"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"look for \"a\" at the start of a string",
"look for \"a\" at the end of a string"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\\^a\"",
"\"\\$a\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a",
"$a",
"a|b"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"look for \"a\" at the start of a string",
"look for \"a\" at the end of a string",
"match a or b"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\\^a\"",
"\"\\$a\"",
"\"a\\|b\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a",
"$a",
"a|b"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"look for \"a\" at the start of a string",
"look for \"a\" at the end of a string",
"match a or b"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\\^a\"",
"\"\\$a\"",
"\"a\|b\"")
table_regex <- tibble(
regex = c("\\\\d",
"[abc]",
"[a-z]",
"[^abc]",
"(abc)",
"^a",
"$a",
"a|b"),
matches = c("Any digit",
"matches a, b, or c",
"matches every character between a and z",
"matches anything except a, b, or c",
"creates a \"capture group\" whereby abc must occur together",
"look for \"a\" at the start of a string",
"look for \"a\" at the end of a string",
"match a or b"),
example_code = c("\"\\\\\\\\d\"",
"\"[abc]\"",
"\"[a-z]\"",
"\"[^abc]\"",
"\"(abc)\")",
"\"\\^a\"",
"\"\\$a\"",
"\"a|b\"")
)
knitr::kable(table_regex,
align = "c",
col.names = c("Regex syntax","String match", "Example in R"))
str_extract(names_respond, "Josh")
str_extract(names_respond, "Jo")
# examples of vectorized string data
names_respond <- c("Ahmed",
"Josh",
"Mateo",
"William",
"Ali",
"Wei",
"Steve-O",
"John")
q1_responses <- c("because you told me to do it",
"it seemed like the right thing to do at the time",
"because I had been over-served",
"I don't know, I just did it",
"I got caught up in the heat of the moment",
"I was given an opportunity, so I took my shot",
"I plead the 5th",
"I could ask you the same question")
failure_mode <- c("fracture",
"yielding",
"deflection",
"fatigue",
"creep")
str_detect(names_respond, "Josh")
str_extract(names_respond, "Jo")
str_subset(names_respond, "li")
str_subset(names_respond, "(li)(Jo)")
str_subset(names_respond, "(li)|(Jo)")
str_subset(names_respond, "li")
str_split(names_respond, "a|A", n=1)
str_split(names_respond, "a", n=1)
str_split(names_respond, "t")
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split(fruits, " and ")
str_split(names_respond, "t")
str_split(names_respond, "t") -> jk
View(jk)
jk[3]
jk[3,1]
str_split_fixed(names_respond, "t") -> jj
str_split_fixed(names_respond, "t", n-1) -> jj
str_split_fixed(names_respond, "t", n=1) -> jj
jj
str_split_fixed(names_respond, "t", n=2) -> jj
jj
str_replace(q1_responses, ".", "!")
str_replace(q1_responses, "\.", "!")
str_replace(q1_responses, "\\.", "!")
str_replace(q1_responses, "\\.", "\\!")
str_replace(q1_responses, "\\.", "\!")
str_replace(q1_responses, "\\.", "\\!")
# examples of vectorized string data
names_respond <- c("Ahmed",
"Josh",
"Mateo",
"William",
"Ali",
"Wei",
"Steve-O",
"John")
q1_responses <- c("Because you told me to do it.",
"It seemed like the right thing to do at the time.",
"Because I had been over-served.",
"I don't know, I just did it.",
"I got caught up in the heat of the moment.",
"I was given an opportunity,. I took my shot.",
"I plead the 5th.",
"I could ask you the same question.")
failure_mode <- c("fracture",
"yielding",
"deflection",
"fatigue",
"creep")
str_replace(q1_responses, "\\.", "\\!")
str_replace(q1_responses, "\\.", "\\?")
# examples of vectorized string data
names_respond <- c("Ahmed",
"Josh",
"Mateo",
"William",
"Ali",
"Wei",
"Steve-O",
"John")
q1_responses <- c("Because you told me to do it.",
"It seemed like the right thing to do at the time.",
"Because I had been over-served.",
"I don't know. I just did it.",
"I got caught up in the heat of the moment.",
"I was given an opportunity. I took my shot.",
"I plead the 5th.",
"I could ask you the same question.")
failure_mode <- c("fracture",
"yielding",
"deflection",
"fatigue",
"creep")
ab <- c("abcde", "\"av")
ab
ab <- c("abcde", ""av")
ab <- c("abcde", "\\"av")
ab <- c("abcde", "\\\\"av")
ab <- c("abcde", "\\\"av")
ab
ab <- c("abcde", "a\"v")
ab
ab <- c("abcde", "a\"v\"")
ab
ab <- c("abcde", "a\"v\"")
str(ab)
ab <- c("abcde", "a\"")
ab
print(ab)
str_detect(string = names_respond, pattern = "Josh") %>%
sum()
str_replace(string = q1_responses,
pattern = "\\.",
replacement = "\\?")
str_replace(string = q1_responses,
pattern = "\\.{2}",
replacement = "\\?")
library(stringr)
str_replace(string = q1_responses,
pattern = "\\.",
replacement = "\\?")
str_replace(string = q1_responses,
pattern = "\\.+",
replacement = "\\?")
