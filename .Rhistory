scale_y_log10() +
scale_x_log10()
#create a temp file to hold the zipped data
temp <- tempfile()
#download the file into temp file
download.file(url = "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip",
destfile = temp,
mode="wb")
temp2 <- unzip(temp, "vehicles.csv") #unzip the file into a csv
raw_data <- read_csv(temp2) #read the csv into a data frame
unlink(temp) #delete the temp file
rm(temp, temp2) #remove the two temp objects from local environment
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
library(tidyverse)
library(knitr)
library(bookdown)
library(scales)
library(kableExtra)
library(GGally)
library(gridExtra)
corr_plots1 <- tibble(x = runif(100, 0, 100),
y1 = x,
y2 = map_dbl(x, ~ (.x*(rnorm(1, mean = 1,  sd = 0.03)) + rnorm(1, mean = 0, sd = 2))),
y3 = map_dbl(x, ~ (.x*(rnorm(1, mean = 0.6,  sd = 0.2)) + rnorm(1, mean = 15, sd = 15))),
y4 = runif(100, 0, 100)
) %>%
pivot_longer(y1:y4, names_to = "type") %>%
mutate(types = as.factor(type))
levels(corr_plots1$types) <- c("Perfect Correlation", "Strong Correlation", "Moderate Correlation", "No Correlation")
p1 <- ggplot(data = corr_plots1,
aes(x = x, y = value)) +
geom_point(aes(color = types)) +
facet_wrap(facets = vars(types),
ncol = 2) +
theme_bw() +
coord_fixed(ratio=1.0) +
labs(x = "Independent Variable (x-axis)",
y = "Dependent Variable (y-axis)") +
theme(legend.position = "none")
ggsave("./images/correlation_example_1.png", dpi = 150)
knitr::include_graphics("./images/correlation_example_1.png")
corr_plots2 <- tibble(x = runif(100, 0, 100),
y1 = map_dbl(x, ~ (.x*(rnorm(1, mean = .8,  sd = 0.15)) + rnorm(1, mean = 10, sd = 10))),
y2 = map_dbl(x, ~ -(.x*(rnorm(1, mean = 0.6,  sd = 0.06)) - rnorm(1, mean = 70, sd = 5))),
y3 = map_dbl(x, ~ (.x*(rnorm(1, mean = 1,  sd = 0.02))^2 + rnorm(1, mean = 0, sd = 2))),
y4 = map_dbl(x, ~ (100*exp(-.x/20)*(rnorm(1, mean = 1,  sd = 0.03)) + rnorm(1, mean = 4, sd = 2)))
) %>%
pivot_longer(y1:y4, names_to = "type") %>%
mutate(types = as.factor(type))
levels(corr_plots2$types) <- c("Positive Correlation",
"Negative Correlation",
"Linear Correlation",
"Non-Linear Correlation")
p2 <- ggplot(data = corr_plots2,
aes(x = x, y = value)) +
geom_point(aes(color = types)) +
facet_wrap(facets = vars(types)) +
theme_bw() +
coord_fixed(ratio=1) +
theme(legend.position = "none") +
labs(x = "Independent Variable",
y = "Dependent Variable")
ggsave("./images/correlation_example_2.png", dpi = 150)
knitr::include_graphics("./images/correlation_example_2.png")
ggplot(data = (mpg),
aes(x = cyl, y = hwy)) +
geom_jitter(aes(x = cyl, y = hwy),
shape = 1,
color = "blue",
width = 0.1,
height = 0.05,
size = 2) +
geom_smooth(method='lm',
se = FALSE,
size = 0.5,
color = "blue") +
xlab("# of Cylinders") +
ylab("Highway Fuel Economy (mi/gal)") +
theme_classic()
# fit a linear model
g1_model <- lm(mpg ~ wt, data=mtcars)
#create a ggplot2 object
g1 <- ggplot(data = mtcars,
aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(model = g1_model, method = "lm") +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight (x1000 lb)")
g1
g1 + facet_grid(cols = vars(cyl),
labeller = label_both) #this code adds names & values to the panel label
g1 + facet_grid(rows = vars(cyl),
labeller = label_both)
# instruct R to treat the cyl variable as a factor with discrete levels
# this, in turn, tells ggplot2 to assign discrete colors to each level
mtcars$cyl <- as.factor(mtcars$cyl)
g3 <- ggplot(data = mtcars,
aes(x = wt, y = mpg, color = cyl)) +
geom_point() +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight, (x1000 lb)")
g3
#"#330099","#CC0066","#FF6633", "#0099CC", "#FF9900","#CC6633", "#33CC99",
ggplot(data = mtcars,
aes(x = wt,
y = mpg,
color = cyl,
shape = cyl)) +
geom_point(size = 2) +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight, (x1000 lb)") +
scale_colour_manual(values = c("sandybrown",
"orangered",
"steelblue2")) +
theme_classic()
#create a temp file to hold the zipped data
temp <- tempfile()
#download the file into temp file
download.file(url = "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip",
destfile = temp,
mode="wb")
temp2 <- unzip(temp, "vehicles.csv") #unzip the file into a csv
raw_data <- read_csv(temp2) #read the csv into a data frame
unlink(temp) #delete the temp file
rm(temp, temp2) #remove the two temp objects from local environment
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08",
"co2TailpipeGpm"
)
df_mpg<-raw_data %>%
dplyr::select(all_of(vars_needed))
#all_of tells dplyr::select to expect a chr vector
# ID the columns that we want as class:factor
vars_factr <- c("make", "drive", "trany", "VClass", "fuelType1")
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::mutate_at(vars_factr, factor) %>%
#create simpler names
dplyr::rename(fuel_type = fuelType1,
cyl = cylinders,
tran = trany,
v_class = VClass) %>% # easier string to type
# keep only data collected after 2000 for the sake of a millennial audience
dplyr::filter(year >= 2000) -> df_mpg
rm(vars_needed, vars_factr) # won't be needing these anymore
head(df_mpg)
#print a character vector of levels for the drive variable in df_mpg
levels(df_mpg$drive)
#print a character vector of levels for the fuel_type variable in df_mpg
levels(df_mpg$fuel_type)
#print a character vector of levels for the v_class variable in df_mpg
levels(df_mpg$v_class)
df_mpg %>% map_dfc(~sum(is.na(.)))
missing_data <- df_mpg %>% filter_all(any_vars(is.na(.)))
head(missing_data, n=10)
e1 <- ggplot(data = df_mpg, aes(x = year, y = comb08)) +
geom_violin(aes(group = year),
outlier.shape = NA,
fill = "royalblue2") +
geom_boxplot(aes(group = year),
fill = NA,
outlier.alpha = 0.2) +
scale_y_log10(limits = c(10,100)) +
theme_bw()
e1
cafe <- read_csv("./data/CAFE_stds.csv", col_names = c("year", "mpg_avg"), skip = 1)
ggplot(cafe, aes(year, mpg_avg)) + geom_col(fill = "maroon") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs( y = "Required Average Fuel Efficiency (mpg)",
x = "Year",
title = "Federal Combined Average Fuel Economy (CAFE) Standards")
p2<-qplot(year, comb08, data=na.omit(df_mpg), geom = "boxplot", aes(group=year), outlier.shape = NA)
p2+facet_wrap(~cyl, nrow=2)
#p3<-qplot(year, comb08, data = diesels, geom = "point", aes(group = year))
#p3+facet_wrap(~cyl, nrow = 1)
p4<-qplot(year, comb08, data=filter(df_mpg, cyl == 4), geom = "violin", group = year, ylim = c(10,40))
p4 + facet_wrap(~fuel_type, nrow = 2) + stat_summary(fun.y=median, geom="point", size=1, color="black")
p5<-qplot(year, comb08, data=filter(df_mpg, cyl == 4, fuel_type == "Regular Gasoline"), geom = "boxplot", outlier.shape = NA, group = year, ylim = c(10,40))
p5 + facet_wrap(~drive, nrow=2)
p6<-qplot(year, comb08, data=filter(df_mpg, cyl == 4, fuel_type == "Regular Gasoline", drive == "Front-Wheel Drive"), geom = "boxplot", outlier.shape = NA, group = year, ylim = c(10,40))
p6
table(df_mpg$cyl)
levels(df_mpg$drive)
levels(df_mpg$fuel_type)
g1 <- ggplot(data = df_mpg) +
geom_density(aes(comb08, fill = fuel_type)) +
facet_wrap(~fuel_type, ncol = 3) +
scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
g1
g2 <- ggplot(data = df_mpg, aes(x=comb08)) +
geom_density(aes(fill = fuel_type),
position = "identity",
alpha = 0.6,
adjust = 1) +
scale_x_log10() +
theme_bw()
g2
df_mpg %>%
filter(cyl == 4, drive == "Front-Wheel Drive", year == 2018) %>%
slice_max(order_by = highway08, n=1) %>%
select(make, model, drive, year, highway08)
df_mpg %>%
filter(cyl == 8, drive == "Rear-Wheel Drive", year == 2019) %>%
slice_min(order_by = city08) %>%
#top_n(n = -1, wt = city08) %>%
select(make, model, drive, year, city08)
knitr::include_graphics("./images/Bentley_Mulsanne_2019.jpg")
?all_of9)
?all_of()
?tidyr_tidy_select
?tidy-select
?tidyr_tidy_select
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::across(.cols = vars_factr, .fns =factor)
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::across(.cols = vars_factr, .fns = as.factor)
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::mutate(across(.cols = vars_factr, .fns = as.factor))
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08",
"co2TailpipeGpm"
)
df_mpg<-raw_data %>%
dplyr::select(all_of(vars_needed))
#all_of tells dplyr::select to expect a character vector of column names
vars_factr <- c("make", "drive", "trany", "VClass", "fuelType1")
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::mutate(across(.cols = vars_factr, .fns = as.factor))
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::mutate(across(all_of(vars_factr), .fns = as.factor))
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08",
"co2TailpipeGpm"
)
df_mpg<-raw_data %>%
dplyr::select(all_of(vars_needed))
#all_of tells dplyr::select to expect a character vector of column names
# ID the columns that we want as class:factor
vars_factr <- c("make", "drive", "trany", "VClass", "fuelType1")
df_mpg %>%
# mutate_at applies the factor function only to the vars of interest
dplyr::mutate(across(all_of(vars_factr), .fns = as.factor)) %>%
#create simpler names
dplyr::rename(fuel_type = fuelType1,
cyl = cylinders,
tran = trany,
v_class = VClass) %>% # easier string to type
# keep only data collected after 2000 for the sake of a millennial audience
dplyr::filter(year >= 2000) -> df_mpg
rm(vars_needed, vars_factr) # won't be needing these anymore
head(df_mpg)
#print a character vector of levels for the drive variable in df_mpg
levels(df_mpg$drive)
#print a character vector of levels for the fuel_type variable in df_mpg
levels(df_mpg$fuel_type)
#print a character vector of levels for the v_class variable in df_mpg
levels(df_mpg$v_class)
test <- filter(df_mpg, guzzler == "T"|"G")
test <- filter(df_raw, guzzler == "T"|"G")
test <- filter(raw_data, guzzler == "T"|"G")
test <- filter(raw_data, guzzler = "T"|"G")
test <- filter(raw_data, guzzler = "T")
test <- filter(raw_data, guzzler == "T")
test <- filter(raw_data, guzzler == "G")
summary(data_raw$guzzler)
summary(raw_data$guzzler)
test <- raw_data %>% mutate(guzzler = as.factor(guzzler))
levels(test$highway08U)
levels(test$guzzler)
problems(raw_data)
fs_bytes(raw_data)
object.size(raw_data)
object.size(raw_data)/1000000
object.size(df_mpg)/1000000
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center')
library(tidyverse)
library(knitr)
library(bookdown)
library(scales)
library(kableExtra)
library(GGally)
library(gridExtra)
corr_plots1 <- tibble(x = runif(100, 0, 100),
y1 = x,
y2 = map_dbl(x, ~ (.x*(rnorm(1, mean = 1,  sd = 0.03)) + rnorm(1, mean = 0, sd = 2))),
y3 = map_dbl(x, ~ (.x*(rnorm(1, mean = 0.6,  sd = 0.2)) + rnorm(1, mean = 15, sd = 15))),
y4 = runif(100, 0, 100)
) %>%
pivot_longer(y1:y4, names_to = "type") %>%
mutate(types = as.factor(type))
levels(corr_plots1$types) <- c("Perfect Correlation", "Strong Correlation", "Moderate Correlation", "No Correlation")
p1 <- ggplot(data = corr_plots1,
aes(x = x, y = value)) +
geom_point(aes(color = types)) +
facet_wrap(facets = vars(types),
ncol = 2) +
theme_bw() +
coord_fixed(ratio=1.0) +
labs(x = "Independent Variable (x-axis)",
y = "Dependent Variable (y-axis)") +
theme(legend.position = "none")
ggsave("./images/correlation_example_1.png", dpi = 150)
knitr::include_graphics("./images/correlation_example_1.png")
corr_plots2 <- tibble(x = runif(100, 0, 100),
y1 = map_dbl(x, ~ (.x*(rnorm(1, mean = .8,  sd = 0.15)) + rnorm(1, mean = 10, sd = 10))),
y2 = map_dbl(x, ~ -(.x*(rnorm(1, mean = 0.6,  sd = 0.06)) - rnorm(1, mean = 70, sd = 5))),
y3 = map_dbl(x, ~ (.x*(rnorm(1, mean = 1,  sd = 0.02))^2 + rnorm(1, mean = 0, sd = 2))),
y4 = map_dbl(x, ~ (100*exp(-.x/20)*(rnorm(1, mean = 1,  sd = 0.03)) + rnorm(1, mean = 4, sd = 2)))
) %>%
pivot_longer(y1:y4, names_to = "type") %>%
mutate(types = as.factor(type))
levels(corr_plots2$types) <- c("Positive Correlation",
"Negative Correlation",
"Linear Correlation",
"Non-Linear Correlation")
p2 <- ggplot(data = corr_plots2,
aes(x = x, y = value)) +
geom_point(aes(color = types)) +
facet_wrap(facets = vars(types)) +
theme_bw() +
coord_fixed(ratio=1) +
theme(legend.position = "none") +
labs(x = "Independent Variable",
y = "Dependent Variable")
ggsave("./images/correlation_example_2.png", dpi = 150)
knitr::include_graphics("./images/correlation_example_2.png")
ggplot(data = (mpg),
aes(x = cyl, y = hwy)) +
geom_jitter(aes(x = cyl, y = hwy),
shape = 1,
color = "blue",
width = 0.1,
height = 0.05,
size = 2) +
geom_smooth(method='lm',
se = FALSE,
size = 0.5,
color = "blue") +
xlab("# of Cylinders") +
ylab("Highway Fuel Economy (mi/gal)") +
theme_classic()
# fit a linear model
g1_model <- lm(mpg ~ wt, data=mtcars)
#create a ggplot2 object
g1 <- ggplot(data = mtcars,
aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(model = g1_model, method = "lm") +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight (x1000 lb)")
g1
g1 + facet_grid(cols = vars(cyl),
labeller = label_both) #this code adds names & values to the panel label
g1 + facet_grid(rows = vars(cyl),
labeller = label_both)
# instruct R to treat the cyl variable as a factor with discrete levels
# this, in turn, tells ggplot2 to assign discrete colors to each level
mtcars$cyl <- as.factor(mtcars$cyl)
g3 <- ggplot(data = mtcars,
aes(x = wt, y = mpg, color = cyl)) +
geom_point() +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight, (x1000 lb)")
g3
#"#330099","#CC0066","#FF6633", "#0099CC", "#FF9900","#CC6633", "#33CC99",
ggplot(data = mtcars,
aes(x = wt,
y = mpg,
color = cyl,
shape = cyl)) +
geom_point(size = 2) +
ylab("Fuel Economy (mi/gal)") +
xlab("Vehicle Weight, (x1000 lb)") +
scale_colour_manual(values = c("sandybrown",
"orangered",
"steelblue2")) +
theme_classic()
#create a temp file to hold the zipped data
temp <- tempfile()
#download the file into temp file
download.file(url = "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip",
destfile = temp,
mode="wb")
temp2 <- unzip(temp, "vehicles.csv") #unzip the file into a csv
raw_data <- read_csv(temp2) #read the csv into a data frame
unlink(temp) #delete the temp file
rm(temp, temp2) #remove the two temp objects from local environment
vars_needed <- c("id",
"make",
"model",
"year",
"cylinders",
"displ",
"drive",
"trany",
"VClass",
"fuelType1",
"comb08",
"highway08",
"city08",
"co2TailpipeGpm"
)
df_mpg<-raw_data %>%
dplyr::select(all_of(vars_needed))
#all_of tells dplyr::select to expect a character vector of column names
rm(raw_data) #remove large file from memory
# ID the columns that we want as class:factor
vars_factr <- c("make", "drive", "trany", "VClass", "fuelType1")
df_mpg %>%
# mutate(across(a)) applies the as.factor function only to the vars of interest
dplyr::mutate(across(all_of(vars_factr), .fns = as.factor)) %>%
#create simpler names
dplyr::rename(fuel_type = fuelType1,
cyl = cylinders,
tran = trany,
v_class = VClass) %>% # easier string to type
# keep only data collected after 2000 for the sake of a millennial audience
dplyr::filter(year >= 2000) -> df_mpg
rm(vars_needed, vars_factr) # won't be needing these anymore
head(df_mpg)
#print a character vector of levels for the drive variable in df_mpg
levels(df_mpg$drive)
#print a character vector of levels for the fuel_type variable in df_mpg
levels(df_mpg$fuel_type)
#print a character vector of levels for the v_class variable in df_mpg
levels(df_mpg$v_class)
df_mpg %>% map_dfc(~sum(is.na(.)))
missing_data <- df_mpg %>% filter_all(any_vars(is.na(.)))
head(missing_data, n=10)
e1 <- ggplot(data = df_mpg, aes(x = year, y = comb08)) +
geom_violin(aes(group = year),
outlier.shape = NA,
fill = "royalblue2") +
geom_boxplot(aes(group = year),
fill = NA,
outlier.alpha = 0.2) +
scale_y_log10(limits = c(10,100)) +
theme_bw()
e1
cafe <- read_csv("./data/CAFE_stds.csv", col_names = c("year", "mpg_avg"), skip = 1)
ggplot(cafe, aes(year, mpg_avg)) + geom_col(fill = "maroon") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs( y = "Required Average Fuel Efficiency (mpg)",
x = "Year",
title = "Federal Combined Average Fuel Economy (CAFE) Standards")
g1 <- ggplot(data = df_mpg) +
geom_density(aes(comb08, fill = fuel_type)) +
facet_wrap(~fuel_type, ncol = 3) +
scale_x_log10() +
theme_bw() +
theme(legend.position = "none")
g1
g2 <- ggplot(data = df_mpg, aes(x=comb08)) +
geom_density(aes(fill = fuel_type),
position = "identity",
alpha = 0.6,
adjust = 1) +
scale_x_log10() +
theme_bw()
g2
df_mpg %>%
filter(cyl == 4, drive == "Front-Wheel Drive", year == 2018) %>%
slice_max(order_by = highway08, n=1) %>%
select(make, model, drive, year, highway08)
df_mpg %>%
filter(cyl == 8, drive == "Rear-Wheel Drive", year == 2019) %>%
slice_min(order_by = city08) %>%
#top_n(n = -1, wt = city08) %>%
select(make, model, drive, year, city08)
knitr::include_graphics("./images/Bentley_Mulsanne_2019.jpg")
