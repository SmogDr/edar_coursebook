color = "grey") +
labs(x = expression(paste("Average (", mu, g/m^3, "): ", frac(UPAS+"Ref", 2))),
y = expression(paste("Difference (", mu, g/m^3, "): UPAS - Ref"))) +
geom_hline(yintercept = mean(mass_diff, na.rm = TRUE),
size = 0.5) +
annotate("text", x = 290,
y = 17,
label = expression(paste("Mean diff: ",
-1.7 ,
mu, g/m^3)),
color = "black",
hjust = "left",
size=3) +
geom_hline(yintercept = mean(mass_diff, na.rm = TRUE) + 1.96*sd(mass_diff, na.rm = TRUE),
size = 0.5,
color = "orange",
linetype = 2) +
annotate("text", x = 385,
y = 117,
label = "+25% of average",
angle = 12,
color = "grey") +
annotate("text", x = 385,
y = -112,
label = "-25% of average",
angle = -11,
color = "grey") +
geom_hline(yintercept = mean(mass_diff, na.rm = TRUE) -1.96*sd(mass_diff, na.rm = TRUE),
size = 0.5,
color = "orange",
linetype = 2) +
annotate("text", x = 5,
y = 175,
label = "95% CI",
color = "orange",
hjust = "left") +
theme_bw() +
theme(aspect.ratio=1,
axis.title = element_text(size=10),
axis.text = element_text(size = 9))+
scale_y_continuous(breaks = seq(-300, 300, 100),
limits = c(-305, 305)) +
scale_x_continuous(breaks = seq(0, 500, 100),
limits = c(0, 500)) +
theme(axis.title.x = element_text(vjust=-0.5))
p2
ggsave("Resp_Dust_Taconite_Bland_Alt.png",
device = png(),
dpi = 300,
units = "cm")
#Read in the metals data
data_metals <- as_tibble(read_csv("/Users/johnvolckens/Documents/Research/R/UPAS/Tac_metals.csv", col_types = cols(.default = col_number())))
#find and remove duplicate entries
df_metals <- data_metals %>%
dplyr::filter(duplicated(data_metals$'Filter ID') == FALSE) %>%
dplyr::rename(filterID = "Filter ID")
#Jessica's code to melt the data
df_metals_long <- df_metals %>%
tidyr::gather(key = "element", value="ug_cm2", 2:22) %>%
dplyr::left_join(dplyr::select(Tac_df, filterID, volume), by=c("filterID")) %>%
dplyr::mutate(met_conc = ug_cm2*6.6/volume*1000) %>%
group_by(element)
summary<-summarise(df_metals_long, "mean" = mean(met_conc), "median" = median(met_conc), "sd" = sd(met_conc))
#JV's code to move the data back to wide format
df_metals <- df_metals_long %>%
tidyr::pivot_wider(names_from = element, values_from = c(met_conc, ug_cm2)) %>%
drop_na() %>%
dplyr::select(-volume)
#Combine with Tac_df and apply QA / QC filters
Tac_df_metals <- Tac_df %>%
dplyr::left_join(df_metals, -volume, by = "filterID") %>%
dplyr::select(-(ug_cm2_Mg:ug_cm2_Pb)) %>% # remove the ug_cm2 columns
dplyr::filter(              # apply QA/QC filters to sample volume and runtime
volume >= 700,
duration <= 800,
mass >= 0.033,
mass <= 0.65,)
#histogram of all metal species, both UPAS and SKC, no QA/QC filters
t <- (ggplot(df_metals_long, aes(met_conc)) + geom_histogram(bins = 20))
t +
facet_wrap(vars(element)) +
scale_x_log10() +
labs(x = expression(paste("PM Concentration (", mu, g/m^3,")")))
#Boxplot of all metal species, both UPAS and SKC, no QA/QC filters
ggplot(df_metals_long, aes(element, met_conc), legend = element) +
geom_boxplot() +
scale_y_log10() +
labs(x = expression(paste("PM Concentration (", mu, g/m^3,")")))
tp_SKC_vols <- Tac_df_metals %>%
dplyr::filter(type == "SKC") %>%
dplyr::select(volume, SampleID, duration)
sample_vols <- Tac_df_metals %>%
dplyr::filter(type == "UPAS") %>%
dplyr::select(volume, SampleID, duration) %>%
dplyr::left_join(tp_SKC_vols, by = "SampleID") %>%
dplyr::rename(UPAS_vol = "volume.x",
SKC_vol = "volume.y",
UPAS_dur = "duration.x",
SKC_dur = "duration.y") %>%
dplyr::mutate(vols_ratio = UPAS_vol/SKC_vol, duration_ratio = UPAS_dur/SKC_dur)
ggplot(sample_vols) +
geom_dotplot(aes(vols_ratio),
binwidth = .01,
dotsize = 2,
fill = "navyblue",
alpha = 0.5) +
geom_dotplot(aes(duration_ratio),
binwidth = .01,
dotsize = 2,
fill = "cyan",
alpha = 0.5)
sample_vols <- sample_vols %>%
dplyr::mutate(v_flag = if_else(vols_ratio<0.85,
if_else(vols_ratio>0.75, TRUE, FALSE), FALSE)) %>%
dplyr::mutate(d_flag = if_else(duration_ratio<1.1,
if_else(duration_ratio>0.9, TRUE, FALSE), FALSE))
#Connect UPAS and SKC metals data by row
Tac_metals_UPAS <- Tac_df_metals %>%
dplyr::filter(type == "UPAS") %>%
dplyr::select(1,2,5,9,19:22,26:48)
#Rename metals column names in Tac_metals_UPAS
names <- str_split(colnames(Tac_metals_UPAS[match("met_conc_Mg", names(Tac_metals_UPAS)):match("met_conc_Pb", names(Tac_metals_UPAS))]),
"met_conc_", n = 2, simplify = TRUE)
names <- names[,2]
Tac_metals_UPAS <- Tac_metals_UPAS %>%
dplyr::rename_at(vars(met_conc_Mg:met_conc_Pb), ~names)
#Prep and rename SKC data for joining
Tac_metals_SKC <- Tac_df_metals %>%
dplyr::filter(type == "SKC") %>%
dplyr::rename_at(vars(met_conc_Mg:met_conc_Pb), ~names) %>%
dplyr::select(-(date:cartridgeID), -si_mass, -si_conc) %>%
dplyr::rename(SKC_mass_c = mass_conc)
Tac_metals_reg <- Tac_metals_SKC %>%
dplyr::left_join(Tac_metals_UPAS, by = "SampleID") %>%
drop_na(contains(".x"), contains(".y")) %>%
dplyr::left_join(sample_vols, by = "SampleID") %>%
dplyr::filter(v_flag == TRUE, d_flag == TRUE)
deming_Fe <- deming(Fe.y ~ Fe.x, Tac_metals_reg,
cv = TRUE) #assume constant CV across data
weights <- (1/((Tac_metals_reg$Fe.x+Tac_metals_reg$Fe.y)/2))
deming_Fe_weighted <- deming(Fe.y ~ Fe.x, Tac_metals_reg,
weights = weights)
ln_deming_Fe <- deming(log(Fe.y) ~ log(Fe.x), Tac_metals_reg,
cv = TRUE) #assume constant CV across data
lm_Fe <- lm(Fe.y ~ Fe.x, Tac_metals_reg)
ggplot(Tac_metals_reg, aes(Fe.x, Fe.y)) +
#coord_trans(x = "log", y = "log", limx = c(8,225), limy = c(8,225)) +
geom_point(color = "darkblue", size = 2, fill = "darkblue", alpha = 0.5) +
geom_abline(slope = 1,
intercept = 0,
color = "grey") +
geom_segment(x = 3,
y = (deming_Fe$coefficients[1]+3*deming_Fe$coefficients[2]),
xend = max(Tac_metals_reg$Fe.x, na.rm = TRUE),
yend = (max(Tac_metals_reg$Fe.x, na.rm = TRUE)*deming_Fe$coefficients[2]
+deming_Fe$coefficients[1]),
linetype = 2)+
theme_bw() +
labs(y = expression(paste("UPAS Elemental Fe (", mu, g/m^3,")")),
x = expression(paste("SKC Elemental Fe (", mu, g/m^3,")")),
title = "Iron") +
theme(aspect.ratio=1,
axis.title = element_text(size=12),
axis.text = element_text(size = 11))
#scale_x_log10(limits = c(1,225)) +
#scale_y_log10(limits = c(1,225))
ggsave("Resp_Iron_Taconite_SKCvsUPAS.png", device = png(), dpi = 300, height = 10, width = 10, units = "cm")
Fe_model <- Tac_metals_reg
Fe_fit <- lm(Fe.y ~ Fe.x, Tac_metals_reg)
Fe_model$predicted <- predict(Fe_fit)
Fe_model$residuals <- residuals(Fe_fit)
# From: https://drsimonj.svbtle.com/visualising-residuals
ggplot(Fe_model, aes(x = Fe.x, y = Fe.y)) +
geom_smooth(method = "lm", se = FALSE, color = "lightgrey") +
geom_segment(aes(xend = Fe.x, yend = predicted), alpha = .2) +
# > Color AND size adjustments made here...
geom_point(color = "blue") + # size also mapped
scale_color_continuous(low = "black", high = "red") +
guides(color = FALSE, size = FALSE) +  # Size legend also removed
# geom_point(aes(y = predicted), shape = 1) +
theme_classic() +
theme(axis.text = element_blank()) +
theme(axis.title = element_blank())
#need to address duplicates and NAs in Job1
Tac_Scatt <- Tac_QC %>%
dplyr::select(SampleID, type, mass_conc, Job1, Job2) %>%
pivot_wider(names_from = type,
values_from = mass_conc) %>%
dplyr::rename(SKC_conc = SKC, UPAS_conc = UPAS) %>%
dplyr::filter(!is.na(UPAS_conc), !is.na(SKC_conc)) %>%
dplyr::mutate(jobs_cat = case_when(
str_detect(Job1, "maint") ~ "Maintenance",
str_detect(Job1, "shop") ~ "Maintenance",
str_detect(Job1, "load") ~ "Driver/Loader",
str_detect(Job1, "drive") ~ "Driver/Loader",
str_detect(Job1, "weld") ~ "Driver/Loader",
str_detect(Job1, "crush") ~ "Ball/Pellet/Crush",
str_detect(Job1, "belt") ~ "Ball/Pellet/Crush",
str_detect(Job1, "pellet") ~ "Ball/Pellet/Crush",
str_detect(Job1, "ball") ~ "Ball/Pellet/Crush",
str_detect(Job1, "filter") ~ "Ball/Pellet/Crush",
str_detect(Job2, "conc") ~ "Ball/Pellet/Crush",
str_detect(Job2, "belt") ~ "Ball/Pellet/Crush",
str_detect(Job1, "mgmt") ~ "Other",
is.na(Job1) ~ "Other"
))
#pearson correlation
R2 <- cor(x = Tac_Scatt$UPAS_conc, y = Tac_Scatt$SKC_conc, use = "pairwise.complete.obs")^2 %>% round(3)
#Lin's concordance
Lins <- epi.ccc(Tac_Scatt$SKC_conc, Tac_Scatt$UPAS_conc)
deming_mass <- deming(SKC_conc ~ UPAS_conc, Tac_Scatt, cv = TRUE)
p1<-ggplot(Tac_Scatt, aes(x = UPAS_conc, y = SKC_conc)) +
geom_point(color = "darkblue",
size = 2, fill = "darkblue",
alpha = 0.5) +
geom_abline(slope = 1,
intercept = 0,
color = "grey") +
geom_segment(x = min(Tac_Scatt$UPAS_conc, na.rm = TRUE),
y = (min(Tac_Scatt$UPAS_conc, na.rm = TRUE)
*deming_mass$coefficients[2]+deming_mass$coefficients[1]),
xend = max(Tac_Scatt$UPAS_conc, na.rm = TRUE),
yend = (max(Tac_Scatt$UPAS_conc, na.rm = TRUE)
*deming_mass$coefficients[2]+deming_mass$coefficients[1]),
linetype = 2) +
theme_bw() +
labs(y = expression(paste("NIOSH 0600 Respirable Dust (", mu, g/m^3,")")),
x = expression(paste("UPAS Respirable Dust (", mu, g/m^3,")"))) +
theme(aspect.ratio=1,
axis.title = element_text(size=12),
axis.text = element_text(size = 11)) +
scale_x_continuous(limits = c(0,615)) +
scale_y_continuous(limits = c(0,615)) +
annotate("text",
x = 0,
y = 575,
hjust = "left",
label = paste("NIOSH 0600 =",
round(deming_mass$coefficients[2], 2),
"x UPAS -",
abs(round(deming_mass$coefficients[1], 2)))) +
annotate("text",
x = 0,
y = 545,
hjust = "left",
label = as.expression(bquote(R^2 == .(R2)))) +
annotate("text",
x = 600,
y = 85,
hjust = "right",
label = expression(paste("1:1 Line \n Fit"))) +
geom_segment(x = 375, y = 126, xend = 475, yend = 126,
color = "grey",
weight = 1.5) +
geom_segment(x = 375, y = 87, xend = 475, yend = 87,
color = "black",
linetype = 2)
p1
ggsave("Resp_Dust_Taconite_SKCvsUPAS.png", device = png(), dpi = 300, height = 10, width = 10, units = "cm")
t.test(x = log(Tac_Scatt$UPAS_conc), y = log(Tac_Scatt$SKC_conc), paired = TRUE)
wilcox.test(x = log(Tac_Scatt$UPAS_conc), y = log(Tac_Scatt$SKC_conc), paired = TRUE)
t.test(x = log(Tac_Scatt$UPAS_conc), y = log(Tac_Scatt$SKC_conc), paired = TRUE)
wilcox.test(x = log(Tac_Scatt$UPAS_conc), y = log(Tac_Scatt$SKC_conc), paired = TRUE)
deming_mass <- deming(SKC_conc ~ UPAS_conc, Tac_Scatt, cv = TRUE)
p1<-ggplot(Tac_Scatt, aes(x = UPAS_conc, y = SKC_conc)) +
geom_point(color = "darkblue",
size = 2, fill = "darkblue",
alpha = 0.5) +
geom_abline(slope = 1,
intercept = 0,
color = "grey") +
geom_segment(x = min(Tac_Scatt$UPAS_conc, na.rm = TRUE),
y = (min(Tac_Scatt$UPAS_conc, na.rm = TRUE)
*deming_mass$coefficients[2]+deming_mass$coefficients[1]),
xend = max(Tac_Scatt$UPAS_conc, na.rm = TRUE),
yend = (max(Tac_Scatt$UPAS_conc, na.rm = TRUE)
*deming_mass$coefficients[2]+deming_mass$coefficients[1]),
linetype = 2) +
theme_bw() +
labs(y = expression(paste("NIOSH 0600 Respirable Dust (", mu, g/m^3,")")),
x = expression(paste("UPAS Respirable Dust (", mu, g/m^3,")"))) +
theme(aspect.ratio=1,
axis.title = element_text(size=12),
axis.text = element_text(size = 11)) +
scale_x_continuous(limits = c(0,615)) +
scale_y_continuous(limits = c(0,615)) +
annotate("text",
x = 0,
y = 575,
hjust = "left",
label = paste("NIOSH 0600 =",
round(deming_mass$coefficients[2], 2),
"x UPAS -",
abs(round(deming_mass$coefficients[1], 2)))) +
annotate("text",
x = 0,
y = 545,
hjust = "left",
label = as.expression(bquote(R^2 == .(R2)))) +
annotate("text",
x = 600,
y = 85,
hjust = "right",
label = expression(paste("1:1 Line \n Fit"))) +
geom_segment(x = 375, y = 126, xend = 475, yend = 126,
color = "grey",
weight = 1.5) +
geom_segment(x = 375, y = 87, xend = 475, yend = 87,
color = "black",
linetype = 2)
p1
ggsave("Resp_Dust_Taconite_SKCvsUPAS.png", device = png(), dpi = 300, height = 10, width = 10, units = "cm")
p1
deming_mass <- deming(SKC_conc ~ UPAS_conc, Tac_Scatt, cv = TRUE)
p1<-ggplot(Tac_Scatt, aes(x = UPAS_conc, y = SKC_conc)) +
geom_point(color = "darkblue",
size = 2, fill = "darkblue",
alpha = 0.5) +
geom_abline(slope = 1,
intercept = 0,
color = "grey") +
geom_segment(x = min(Tac_Scatt$UPAS_conc, na.rm = TRUE),
y = (min(Tac_Scatt$UPAS_conc, na.rm = TRUE)
*deming_mass$coefficients[2]+deming_mass$coefficients[1]),
xend = max(Tac_Scatt$UPAS_conc, na.rm = TRUE),
yend = (max(Tac_Scatt$UPAS_conc, na.rm = TRUE)
*deming_mass$coefficients[2]+deming_mass$coefficients[1]),
linetype = 2) +
theme_bw() +
labs(y = expression(paste("NIOSH 0600 Respirable Dust (", mu, g/m^3,")")),
x = expression(paste("UPAS Respirable Dust (", mu, g/m^3,")"))) +
theme(aspect.ratio=1,
axis.title = element_text(size=12),
axis.text = element_text(size = 11)) +
scale_x_continuous(limits = c(0,615)) +
scale_y_continuous(limits = c(0,615)) +
annotate("text",
x = 0,
y = 575,
hjust = "left",
label = paste("NIOSH 0600 =",
round(deming_mass$coefficients[2], 2),
"x UPAS -",
abs(round(deming_mass$coefficients[1], 2)))) +
annotate("text",
x = 0,
y = 545,
hjust = "left",
label = as.expression(bquote(R^2 == .(R2)))) +
annotate("text",
x = 600,
y = 85,
hjust = "right",
label = expression(paste("1:1 Line \n Fit"))) +
geom_segment(x = 375, y = 126, xend = 475, yend = 126,
color = "grey",
weight = 1.5) +
geom_segment(x = 375, y = 87, xend = 475, yend = 87,
color = "black",
linetype = 2)
p1
ggsave("Resp_Dust_Taconite_SKCvsUPAS.png", device = png(), dpi = 300, height = 10, width = 10, units = "cm")
p1
library(tidyverse)
library(knitr)
library(bookdown)
knitr::include_graphics("./images/model_steps.png")
knitr::include_graphics("./images/OLS_anno.png")
data_hw <- read_csv("./data/height_weight.csv")
plot(data_hw$shoe_size, data_hw$height)
plot(data_hw$weight, data_hw$height)
summary(lm(data_hw, height ~ weight))
summary(lm(data_hw$height ~ data_hw$weight))
summary(lm(data_hw$height ~ data_hw$shoe_size))
h_s <- (lm(data_hw$height ~ data_hw$shoe_size))
plot(h_s)
pacf(h_s$residuals)
plot(h_s)
h_w <- (lm(data_hw$height ~ data_hw$weight))
plot(h_w)
w_h <- (lm(data_hw$weight ~ data_hw$height))
plot(w_h)
cor(data_hw)
w_w <- lm(data_hw$weight ~ data_hw$waist)
plot(w_w)
plot(data_hw$weight, data_hw$waist)
plot(data_hw$waist, data_hw$weight)
ggplot(data = data_hw, aes(x = waist, y = height)) +
geom_point() +
theme_classic()
ggplot(data = data_hw, aes(x = waist, y = height)) +
geom_point() +
theme_classic()
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
geom_smooth(model = "lm") +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed() +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.2) +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.1) +
theme_classic()
range(data_hw$weight)
(max(data_hw$weight)-min(data_hw$weight))
(max(data_hw$weight)-min(data_hw$weight))/(max(data_hw$waist)-min(data_hw$waist))
1/(max(data_hw$weight)-min(data_hw$weight))/(max(data_hw$waist)-min(data_hw$waist))
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.05) +
theme_classic()
1max(data_hw$weight)/max(data_hw$waist)
max(data_hw$weight)/max(data_hw$waist)
1/6
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.16) +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.1) +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.1) +
ylab("Weight, lbs") +
xlab("Waist size, in") +
theme_classic()
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.1) +
ylab("Weight, lbs") +
xlab("Waist size, in") +
theme_classic() +
theme(element_text(size = 12))
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = waist, y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.1) +
ylab("Weight, lbs") +
xlab("Waist size, in") +
theme_classic(base_size = 12)
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = sqrt(waist), y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.1) +
ylab("Weight, lbs") +
xlab("Waist size, in") +
theme_classic(base_size = 14)
data_hw <- read_csv("./data/height_weight.csv")
ggplot(data = data_hw, aes(x = sqrt(waist), y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.01) +
ylab("Weight, lbs") +
xlab("Waist size, in") +
theme_classic(base_size = 14)
model2 <- lm(data_hw$weight~sqrt(data_hw$waist))
model1 <- lm(data_hw$weight~data_hw$waist)
View(model1)
summary(model1)
summary(model2)
ggplot(data = data_hw, aes(x = sqrt(waist), y = weight)) +
geom_point() +
#geom_smooth(method = "lm") +
coord_fixed(ratio = 0.01) +
ylab("Weight, lbs") +
xlab("Waist size, in") +
theme_classic(base_size = 14)
library(haven)
?haven
??haven
vignette(package = haven)
vignette(package = "haven")
